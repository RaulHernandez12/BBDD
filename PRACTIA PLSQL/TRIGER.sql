CREATE OR REPLACE TRIGGER auditoria_suministros
AFTER UPDATE OF PRECIO_COMPRA ON SUMINISTROS FOR EACH ROW

BEGIN
    INSERT INTO SUMINISTROS_AUDIT (PRECIO_VIEJO,PRECIO_NUEVO,FECHA) VALUES(:OLD.PRECIO_COMPRA, :NEW.PRECIO_COMPRA, SYSDATE);
END;

UPDATE SUMINISTROS SET PRECIO_COMPRA = 1200 WHERE TIPO= 'AA';

SELECT * FROM SUMINISTROS_AUDIT;

/*Crear un trigger para la tabla de piezas que prohíba modificar el precio de venta
de una pieza a un precio más pequeño que el del menor precio de compra para
esa pieza. Si se produce esta situación debe provocar un error y la modificación
del precio no se realizará. (2.5)*/

CREATE OR REPLACE TRIGGER PrecioPiezas
BEFORE UPDATE  ON PIEZAS  FOR EACH ROW 
   DECLARE    
   v_precioMin NUMBER; 
BEGIN
    
    SELECT MIN(PRECIO_COMPRA) into v_precioMin
    FROM SUMINISTROS 
    WHERE modelo = :old.MODELO AND tipo = :old.TIPO;
    
    IF (:NEW.PRECIO_VENTA < v_precioMin) THEN
    RAISE_APPLICATION_ERROR(-20001,'EL PRECIO INTRODUCIDO ES INCORRECTO');
    
    END IF;
END;

DESCRIBE SUMINISTROS;
commit;
SELECT * FROM SUMINISTROS;
SELECT MIN(PRECIO_COMPRA)
FROM SUMINISTROS 
WHERE modelo = :old.MODELO AND tipo = :old.TIPO;
UPDATE PIEZAS SET PRECIO_VENTA = 1500 WHERE TIPO='BB' AND MODELO='89';
SELECT * FROM PIEZAS;
ROLLBACK;

CREATE OR REPLACE TRIGGER ACTUALIZAR_CASCADA
AFTER UPDATE ON PIEZAS FOR EACH ROW

BEGIN
   IF (:NEW.TIPO != :OLD.TIPO) THEN
    :NEW.TIPO := :OLD.TIPO;
    END IF;
END;